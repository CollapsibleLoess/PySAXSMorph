import numpy as np
import math


def calcgammar(rpts, rmax, rmin, extrap, epts, porosity):
    # 创建一个新字典来存储计算后的数据
    r_gammar = {'R': np.zeros(rpts), 'gammaR': np.zeros(rpts)}      # 创建一个有rpts行和2列的数组
    diffgammar = np.zeros(rpts)       # 长度为rpts的一维数组
    intergal_q = np.zeros(epts)          # 长度为epts的一维数组
    gamma_r_max = 0.0

    for i in range(rpts):
        r_gammar['R'][i] = i * (rmax - rmin) / rpts + rmin      # 计算了从rmin到rmax范围内的一个等间距的值
        trapz = 0.0                                         # 累加梯形法则计算的面积
        for j in range(epts):
            qr = r_gammar['R'][i] * extrap['Q'][j]
            sinqr = math.sin(qr)
            intergal_q[j] = (4 * math.pi * extrap['Q'][j]**2 * extrap['ExtraIQ'][j] * sinqr) / qr
            if j > 0:
                trapz += (extrap['Q'][j] - extrap['Q'][j-1]) * \
                         (intergal_q[j] + intergal_q[j - 1]) / 2.0
        diffgammar[i] = trapz
        if diffgammar[i] > gamma_r_max:
            gamma_r_max = diffgammar[i]

    if abs(diffgammar[-1]) > 0.001:
        print("Gamma(r) not converged...")

    for i in range(rpts):
        r_gammar['gammaR'][i] = (porosity - porosity**2) * diffgammar[i] / gamma_r_max + porosity**2

    # 将 r_gammar['R'] 和 r_gammar['gammaR'] 导出到一个 txt 文件
    with open('r_gammar.txt', 'w') as file:
        for r, gammaR in zip(r_gammar['R'], r_gammar['gammaR']):
            file.write(f"{r} {gammaR}\n")

    print("导出完成")

    return r_gammar

# 初始化参数
rpts = 100  # Number of r points
rmax = 10.0
rmin = 1.0
extrap_data = np.array([
    [0.00515, 390.4323328], [0.00515, 390.4323328], [0.00546, 332.340721], [0.00579, 291.0648359],
    [0.00613, 244.8713779], [0.00650, 209.595137], [0.00689, 175.52658], [0.00730, 150.869156],
    [0.00774, 126.8546758], [0.00821, 104.39491], [0.00870, 89.89264964], [0.00922, 73.35160543],
    [0.00978, 61.50218731], [0.01036, 51.25305477], [0.01099, 42.40377207], [0.01164, 36.86820718],
    [0.01234, 30.95995198], [0.01308, 25.75121545], [0.01387, 22.1926132], [0.01470, 18.60600149],
    [0.01558, 15.4807998], [0.01652, 13.10131244], [0.01751, 11.07928084], [0.01856, 9.518358959],
    [0.01967, 8.249319708], [0.02085, 7.236159495], [0.02210, 6.236128392], [0.02343, 5.387747209],
    [0.02483, 4.696206686], [0.02633, 3.939450765], [0.02790, 3.541185113], [0.02958, 3.07133565],
    [0.03135, 2.609383708], [0.03324, 2.266520553], [0.03523, 1.995343896], [0.03734, 1.725159971],
    [0.03958, 1.499801754], [0.04196, 1.263762874], [0.04448, 1.175865846], [0.04714, 0.938736922],
    [0.04997, 0.827399372], [0.05297, 0.718948561], [0.05615, 0.636166187], [0.05952, 0.561865298],
    [0.06309, 0.482949304], [0.06688, 0.424941398], [0.07089, 0.382100876], [0.07514, 0.324883671],
    [0.07965, 0.299377944], [0.08443, 0.261442022], [0.08949, 0.234603235], [0.09486, 0.194462812],
    [0.10056, 0.178126118], [0.10659, 0.158228125], [0.11298, 0.151816357], [0.11976, 0.113403017],
    [0.12695, 0.093930814], [0.13457, 0.098686384], [0.14264, 0.082341137], [0.15120, 0.08039151],
    [0.16027, 0.071939049], [0.16989, 0.068425053], [0.18008, 0.060492992], [0.19089, 0.055642187],
    [0.20234, 0.060611983], [0.21448, 0.045522158], [0.22735, 0.035018069], [0.24099, 0.033038728],
    [0.25545, 0.028411853], [0.27077, 0.033661076], [0.28702, 0.024414242], [0.30424, 0.026223293],
    [0.32250, 0.016121115], [0.34185, 0.021974668], [0.36236, 0.020658843], [0.38410, 0.016668448],
    [0.40714, 0.01159941], [0.43157, 0.012933233], [0.45747, 0.009551875], [0.48491, 0.005907132],
    [0.51401, 0.004115129], [0.54485, 0.003630522], [0.58036, 0.003849654], [0.58036, 0.003172546]
])

# 将数据转换为字典格式
extrap = {'Q': extrap_data[:, 0], 'ExtraIQ': extrap_data[:, 1]}

# epts 是 extrap 的行数
epts = extrap_data.shape[0]

# 进行计算
calcgammar(rpts, rmax, rmin, extrap, epts, 0.3)
